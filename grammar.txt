program -> extern_list decl_list | decl_list

extern_list -> extern extern_list'
extern_list' -> extern extern_list' | ϵ
extern -> "extern" type_spec IDENT "(" params ")" ";"

decl_list -> decl decl_list'
decl_list' -> decl decl_list' | ϵ
decl -> var_decl | fun_decl
var_decl -> var_type IDENT ";" 
type_spec -> "void" | var_type
var_type  -> "int" |  "float" |  "bool"
fun_decl -> "void" IDENT "(" params ")" block
    | "int" IDENT "(" params ")" block
    | "float" IDENT "(" params ")" block
    | "bool" IDENT "(" params ")" block

params -> param_list | "void" | ϵ
param_list -> param param_list'
param_list' -> "," param param_list' | ϵ
param -> "int" IDENT
    | "float" IDENT
    | "bool" IDENT

block -> "{" local_decls stmt_list "}"
local_decls -> local_decls'
local_decls' -> local_decl local_decls' | ϵ
local_decl -> "int" IDENT ";"
    | "float" IDENT ";"
    | "bool" IDENT ";"

stmt_list -> stmt_list'
stmt_list' -> stmt stmt_list' | ϵ
stmt -> expr_stmt | block | if_stmt | while_stmt | return_stmt
expr_stmt -> expr ";" | ";"
while_stmt -> "while" "(" expr ")" stmt 
if_stmt -> "if" "(" expr ")" block else_stmt
else_stmt -> "else" block | ϵ
return_stmt -> "return" return_stmt'
return_stmt' -> ";" | expr ";"

expr -> IDENT "=" expr | logical_or

logical_or -> logical_and logical_or'
logical_or' -> "||" logical_and logical_or' | ϵ

logical_and -> equality logical_and'
logical_and' -> "&&" equality logical_and' | ϵ

equality -> relational equality'
equality' -> "==" relational equality'
    | "!=" relational equality'
    | ϵ

relational -> additive relational'
relational' -> "<=" additive relational'
    | "<" additive relational'
    | ">=" additive relational'
    | ">" additive relational'
    | ϵ

additive -> multiplicative additive'
additive' -> "+" multiplicative additive'
    | "-" multiplicative additive'
    | ϵ

multiplicative -> unary multiplicative'
multiplicative' -> "*" unary multiplicative'
    | "/" unary multiplicative'
    | "%" unary multiplicative'
    | ϵ

unary -> "-" factor
    | "!" factor
    | factor
    
factor -> "(" expr ")" | reference

reference -> IDENT reference' | literal
reference' -> "(" args ")" | ϵ

literal -> INT_LIT | FLOAT_LIT | BOOL_LIT     

args -> arg_list | ϵ
arg_list -> expr arg_list'
arg_list' -> "," expr arg_list' | ϵ